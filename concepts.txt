As the name suggests Simple Values variables are which hold only a single value. Here the types of Simple Value variables -

    string:
    
 variable "instance_type" {
   description = "Instance type t2.micro"
   type        =  string
   default     = "t2.micro"
}   

   instance_type =  var.instance_type
    
    
    ====
    number
    
  variable "instance_count" {
  description = "EC2 instance count"
  type        = number
  default     = 2
} 
  
  
    
    bool

variable "enable_public_ip" {
  description = "Enable public IP address"
  type        = bool
  default     = true
}



=============


A variables.tf file is used to define the variables type and optionally set a default value.
A terraform. tfvars file is used to set the actual values of the variables. 

Now create variable.tf but without any default values
variable "instance_type" {
}

Finally create terraform.tfvars
instance_type="t2.micro"


terraform plan -var-file="stage.tfvars"
terraform plan -var="instance_type=t2.micro"


=========================


3. Terraform Variables - list, set, map

list 
As the name suggests we are going to define a list that will contain more than one element in it.

variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3s"]
}

resource "aws_iam_user" "example" {
  count = length(var.user_names)
  name  = var.user_names[count.index]
}

variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3s"]
}



 Map variable type

Terraform also supports the map variable type where you can define the key-valye pair.

 variable "project_environment" {
  description = "project name and environment"
  type        = map(string)
  default     = {
    project     = "project-alpha",
    environment = "dev"
  }
}

=========================

Terraform locals are quite similar to Terraform variables but Terraform locals do not change their value. 

On the other hand, if you talk about Terraform input variables then it is dependent on user input and it can change its value

So if you have a very large Terraform file where you need to use the same values or expressions multiple times then Terraform local can be useful for you.




provider "aws" {
   region     = "eu-central-1"
   access_key = "AKIATQ37NXB2G2LXXXXX"
   secret_key = "r1oaShokKPw+YY7qaHxj8mD2T8BpxRUVXXXXXXXX"
}

locals {
  staging_env = "staging"
}

resource "aws_vpc" "staging-vpc" {
  cidr_block = "10.5.0.0/16"

  tags = {
    Name = "${local.staging_env}-vpc-tag"
  }
}

resource "aws_subnet" "staging-subnet" {
  vpc_id = aws_vpc.staging-vpc.id
  cidr_block = "10.5.0.0/16"

  tags = {
    Name = "${local.staging_env}-subnet-tag"
  }
}

resource "aws_instance" "ec2_example" {
   
   ami           = "ami-0767046d1677be5a0"
   instance_type = "t2.micro"
   subnet_id = aws_subnet.staging-subnet.id
   
   tags = {
           Name = "${local.staging_env} - Terraform EC2"
   }
}

 






